我的学习网站：http://www.imooc.com/learn/387


Hive 数据仓库
【hive 安装】
（1）下载上传到linux系统中，apache-hive-0.13.0-bin.tar.gz
（2）tar -zxvf apache-hive-0.13.0-bin.tar.gz 解压

<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>javax.jdo.option.ConnectionURL</name>
  <value>jdbc:mysql://192.168.0.106:3306/hive</value> 
</property>

<property>
  <name>javax.jdo.option.ConnectionDriverName</name>
  <value>com.mysql.jdbc.Driver</value> 
</property>

<property>
  <name>javax.jdo.option.ConnectionUserName</name>
  <value>root</value> 
</property>

<property>
  <name>javax.jdo.option.ConnectionPassword</name>
  <value>www321</value> 
</property>

</configuration>

【远程连接windows数据库报错】
Caused by: java.sql.SQLException: Access denied for user 'root'@'DESKTOP-V7K5M8C' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:946)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:2941)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:868)
	at com.mysql.jdbc.MysqlIO.secureAuth411(MysqlIO.java:3340)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1238)
	at com.mysql.jdbc.Connection.createNewIO(Connection.java:2743)
	at com.mysql.jdbc.Connection.<init>(Connection.java:1553)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:266)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at com.jolbox.bonecp.BoneCP.obtainRawInternalConnection(BoneCP.java:361)
	at com.jolbox.bonecp.BoneCP.<init>(BoneCP.java:416)
解决方法：需要修改权限
mysql> use mysql;
Database changed
mysql> Grant all privileges on *.* to 'root'@'%' identified by 'www321' with grant option;
Query OK, 0 rows affected (0.03 sec)

mysql> select host, user, password from user;
+-----------+------+-------------------------------------------+
| host      | user | password                                  |
+-----------+------+-------------------------------------------+
| localhost | root | *2E82EEA2FDFE5A940E190309C867749F1CFCCDE9 |
| %         | root | *2E82EEA2FDFE5A940E190309C867749F1CFCCDE9 |
+-----------+------+-------------------------------------------+
2 rows in set (0.00 sec)
mysql> flush privileges;

【建表出错】
MySQL的varchar主键只支持不超过768个字节 或者 768/2=384个双字节 或者 768/3=256个三字节的字段 
而 GBK是双字节的，UTF-8是三字节的。
create table test2(tid int, tname string);
FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. MetaException(message:javax.jdo.JDODataStoreException: An exception was thrown while adding/validating class(es) : Specified key was too long; max key length is 767 bytes
com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: Specified key was too long; max key length is 767 bytes
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)

在windows命令行输入：alter database hive character set latin1;
即可解决问题。


【出现hive的drop命令卡主】
原因：是在建好hive数据库后,没有第一时间将character_set_database编码由utf8修改为latin1.而是去hive中create了一张表.而后才将character_set_database编码由utf8改成了latin
解决办法：
在mysql中drop hive
重新create hive,
修改编码,alter database hive character set latin1
进入hive shell
创建表,drop表,正常!

修改完后，启动hive --service hwi
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
【出现INFO metastore.ObjectStore: Initialized ObjectStore
16/08/25 02:18:30 INFO metastore.HiveMetaStore: 0: Shutting down the object store...
16/08/25 02:18:30 INFO HiveMetaStore.audit: ugi=root	ip=unknown-ip-addr	cmd=Shutting down the object store...	
16/08/25 02:18:30 INFO metastore.HiveMetaStore: 0: Metastore shutdown complete.
16/08/25 02:18:30 INFO HiveMetaStore.audit: ugi=root	ip=unknown-ip-addr	cmd=Metastore shutdown complete.	
16/08/25 02:18:42 INFO metastore.HiveMetaStore: No user is added in admin role, since config is empty
16/08/25 02:18:42 INFO metastore.HiveMetaStore: 0: get_all_databases
16/08/25 02:18:42 INFO HiveMetaStore.audit: ugi=root	ip=unknown-ip-addr	cmd=get_all_databases	】
是不影响的


进入hive命令行：
（1）hive    quit;
（2）hive --service cli    exit;

show tables;
show functions;

查看表结构：
desc 表名

查看HDFS上的文件:
dfs -ls 目录
dfs -lsr(递归的方式)

执行操作系统的命令（linux）:
!命令

执行HQL语句
select *** from ***

执行SQL的脚本
source SQL文件

进入hive的静默模式:
hive -S（不产生调试信息）


hive -e "show tables";
直接在linux系统中执行hive的命令

Hive web界面方式：
-端口号：9999
-启动方式：hive --service hwi &
-通过浏览器来访问：http：//<linux系统的ip地址>:9999/hwi/
http://192.168.200.180:9999/hwi/

【问题】
hive --service hwi
16/08/22 16:19:35 INFO hwi.HWIServer: HWI is starting up
16/08/22 16:19:35 INFO mortbay.log: Logging to org.slf4j.impl.Log4jLoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLog
16/08/22 16:19:35 INFO mortbay.log: jetty-6.1.26
16/08/22 16:19:36 INFO mortbay.log: Extract /root/user/apache-hive-0.13.0-bin/lib/hive-hwi-0.13.0.war to /tmp/Jetty_0_0_0_0_9999_hive.hwi.0.13.0.war__hwi__.45sl01/webapp
16/08/22 16:19:36 WARN mortbay.log: failed SocketConnector@0.0.0.0:9999: java.net.BindException: 地址已在使用
16/08/22 16:19:36 WARN mortbay.log: failed Jetty23Shims$Server@6b26e945: java.net.BindException: 地址已在使用

解决：重启虚拟机

【问题】
HTTP ERROR 500
解决：jdk的工具包没有放进去
cp /root/user/jdk/jdk1.8.0_101/lib/tools.jar  /root/user/apache-hive-0.13.0-bin/lib/

【varchar和char的区别】
vname               	varchar(20)         	                    
cname               	char(20) 
前者最大为20个字节，后者为固定20个字节，不满20的填满20

hive> create table student1
    > (sid int,
    > sname string,
    > grades array<map<string,float>> );
{1,'Tom',[<'大学语文',80>,<'大学英语',90>]}

create table student2
(sid int ,
info struct<name:string,age:int,sex:string>;

{1,<'Tom',10,'男'>}


Hive 的数据模型
表：

【Table 内部表】
create table t1(tid int,tname string,age int);

create table t2(tid int,tname string,age int)
location '/mytable /hive /t2';指定目录

create table t3(tid int,tname string,age int)
row format delimited fields terminated by ',';
列分隔符为","

建表时插入数据，是通过查询来实现的。
create table t4
row format delimited fields terminated by ',' //默认的是没有分隔符的
as
select * from sample_data;  //将sample_data表里的数据转化到t4中


hdfs fs -cat /user/hive/warehouse/t5/000000_0 查看表中的数据.

将表删除，会被删到hdfs的回收站中.

【Partition 分区表】
（1）新建一张分区表
create table partition_table
(sid int,sname string)
partitioned by (gender string)
row format delimited fields terminated by ',';
（2）将hive仓库中的某个表的（特定数据，除了分区的数据）数据导入到分区表中
insert into table partition_table partition(gender='M') select sid,sname from
simple_data1 where gender='M';

insert into table partition_table partition(gender='F') select sid,sname from 
simple_data1 where gender='F';


【问题】
在跑insert into table partition时，出现
com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: Specified key was too long; max key length is 767 bytes
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:2941)

不用理会，会继续得到正确的答案


【External Table 外部表】
外部表只有一个过程，加载和创建表同时完成，并不会移动到数据仓库目录中，只是与外部数据建立一个
链接，当删除一个外部表时，仅删除该链接。
create external table external_student
(sid int,sname string,age int)
row format delimited fields terminated by ','
location '/input';

创建一个外部表，将hdfs目录input下的众多表中的sid,sname,age都导入到外部表中





【Bucket Table 桶表】
桶表是对数据进行哈希取值，然后放到不同文件中存储.
create table bucket_table
(sid int ,sname string,age int)
clustered by(sname) into 5 buckets;   //以sname为哈希运算，结果放入到5个桶中.




【将linux中的表导入到hive的一张表中】
load data local inpath '/root/data/d1.txt' overwrite into table simple_data1;
注意点：
（1）其中data是root下的data，不是/data/
（2）若果发现导入到hive表中的数据为空，则有可能是列分隔符的原因 \t ,可以用navicat先建好一张表，把里面的数据写好，然后以txt的格式导出，再进行修改，即可。



【hive的视图】
视图是一种虚表，是一个逻辑概念，可以跨越多张表.
视图建立在已有表的基础上，视图赖以建立的这些表称为基表.
视图可以简化查询




 create table simple_data1
   (sid int, sname string,
   gender string)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY '\t'
    STORED AS TEXTFILE;


Hive的几种常见的数据导入方式
这里介绍四种：
（1）、从本地文件系统中导入数据到Hive表；
（2）、从HDFS上导入数据到Hive表；
（3）、从别的表中查询出相应的数据并导入到Hive表中；
（4）、在创建表的时候通过从别的表中查询出相应的记录并插入到所创建的表中。


一、从本地文件系统中导入数据到Hive表

先在Hive里面创建好表，如下：
hive> create table wyp
    > (id int, name string,
    > age int, tel string)
    > ROW FORMAT DELIMITED
    > FIELDS TERMINATED BY '\t'
    > STORED AS TEXTFILE;
OK
Time taken: 2.832 seconds
复制代码

这个表很简单，只有四个字段，具体含义我就不解释了。本地文件系统里面有个/home/wyp/wyp.txt文件，内容如下：
[wyp@master ~]$ cat wyp.txt
1       wyp     25      13188888888888
2       test    30      13888888888888
3       zs      34      899314121
复制代码

wyp.txt文件中的数据列之间是使用\t分割的，可以通过下面的语句将这个文件里面的数据导入到wyp表里面，操作如下：
hive> load data local inpath 'wyp.txt' into table wyp;
Copying data from file:/home/wyp/wyp.txt
Copying file: file:/home/wyp/wyp.txt
Loading data to table default.wyp
Table default.wyp stats:
[num_partitions: 0, num_files: 1, num_rows: 0, total_size: 67]
OK
Time taken: 5.967 seconds
复制代码

这样就将wyp.txt里面的内容导入到wyp表里面去了，可以到wyp表的数据目录下查看，如下命令：

hive> dfs -ls /user/hive/warehouse/wyp ;
Found 1 items
-rw-r--r--3 wyp supergroup 67 2014-02-19 18:23 /hive/warehouse/wyp/wyp.txt
复制代码

需要注意的是：

和我们熟悉的关系型数据库不一样，Hive现在还不支持在insert语句里面直接给出一组记录的文字形式，也就是说，Hive并不支持INSERT INTO …. VALUES形式的语句。

二、HDFS上导入数据到Hive表

　　从本地文件系统中将数据导入到Hive表的过程中，其实是先将数据临时复制到HDFS的一个目录下（典型的情况是复制到上传用户的HDFS home目录下,比如/home/wyp/），然后再将数据从那个临时目录下移动（注意，这里说的是移动，不是复制！）到对应的Hive表的数据目录里面。既然如此，那么Hive肯定支持将数据直接从HDFS上的一个目录移动到相应Hive表的数据目录下，假设有下面这个文件/home/wyp/add.txt，具体的操作如下：
[wyp@master /home/q/hadoop-2.2.0]$ bin/hadoop fs -cat /home/wyp/add.txt
5       wyp1    23      131212121212
6       wyp2    24      134535353535
7       wyp3    25      132453535353
8       wyp4    26      154243434355
复制代码

上面是需要插入数据的内容，这个文件是存放在HDFS上/home/wyp目录（和一中提到的不同，一中提到的文件是存放在本地文件系统上）里面，我们可以通过下面的命令将这个文件里面的内容导入到Hive表中，具体操作如下：

hive> load data inpath '/home/wyp/add.txt' into table wyp;
Loading data to table default.wyp
Table default.wyp stats:
[num_partitions: 0, num_files: 2, num_rows: 0, total_size: 215]
OK
Time taken: 0.47 seconds

hive> select * from wyp;
OK
5       wyp1    23      131212121212
6       wyp2    24      134535353535
7       wyp3    25      132453535353
8       wyp4    26      154243434355
1       wyp     25      13188888888888
2       test    30      13888888888888
3       zs      34      899314121
Time taken: 0.096 seconds, Fetched: 7 row(s)
复制代码

从上面的执行结果我们可以看到，数据的确导入到wyp表中了！请注意load data inpath ‘/home/wyp/add.txt’ into table wyp;里面是没有local这个单词的，这个是和一中的区别。

三、从别的表中查询出相应的数据并导入到Hive表中

假设Hive中有test表，其建表语句如下所示：

hive> create table test(
    > id int, name string
    > ,tel string)
    > partitioned by
    > (age int)
    > ROW FORMAT DELIMITED
    > FIELDS TERMINATED BY '\t'
    > STORED AS TEXTFILE;
OK
Time taken: 0.261 seconds
复制代码

大体和wyp表的建表语句类似，只不过test表里面用age作为了分区字段。对于分区，这里在做解释一下：
分区：在Hive中，表的每一个分区对应表下的相应目录，所有分区的数据都是存储在对应的目录中。比如wyp表有dt和city两个分区，则对应dt=20131218,city=BJ对应表的目录为/user/hive/warehouse/dt=20131218/city=BJ，所有属于这个分区的数据都存放在这个目录中。

下面语句就是将wyp表中的查询结果并插入到test表中：
hive> insert into table test
    > partition (age='25')
    > select id, name, tel
    > from wyp;
#####################################################################
           这里输出了一堆Mapreduce任务信息，这里省略
#####################################################################
Total MapReduce CPU Time Spent: 1 seconds 310 msec
OK
Time taken: 19.125 seconds

hive> select * from test;
OK
5       wyp1    131212121212    25
6       wyp2    134535353535    25
7       wyp3    132453535353    25
8       wyp4    154243434355    25
1       wyp     13188888888888  25
2       test    13888888888888  25
3       zs      899314121       25
Time taken: 0.126 seconds, Fetched: 7 row(s)
复制代码
这里做一下说明：
我们知道我们传统数据块的形式insert into table values（字段1，字段2），这种形式hive是不支持的。

通过上面的输出，我们可以看到从wyp表中查询出来的东西已经成功插入到test表中去了！如果目标表（test）中不存在分区字段，可以去掉partition (age=’25′)语句。当然，我们也可以在select语句里面通过使用分区值来动态指明分区：
hive> set hive.exec.dynamic.partition.mode=nonstrict;
hive> insert into table test
    > partition (age)
    > select id, name,
    > tel, age
    > from wyp;
#####################################################################
           这里输出了一堆Mapreduce任务信息，这里省略
#####################################################################
Total MapReduce CPU Time Spent: 1 seconds 510 msec
OK
Time taken: 17.712 seconds


hive> select * from test;
OK
5       wyp1    131212121212    23
6       wyp2    134535353535    24
7       wyp3    132453535353    25
1       wyp     13188888888888  25
8       wyp4    154243434355    26
2       test    13888888888888  30
3       zs      899314121       34
Time taken: 0.399 seconds, Fetched: 7 row(s)
复制代码

这种方法叫做动态分区插入，但是Hive中默认是关闭的，所以在使用前需要先把hive.exec.dynamic.partition.mode设置为nonstrict。当然，Hive也支持insert overwrite方式来插入数据，从字面我们就可以看出，overwrite是覆盖的意思，是的，执行完这条语句的时候，相应数据目录下的数据将会被覆盖！而insert into则不会，注意两者之间的区别。例子如下：

hive> insert overwrite table test
    > PARTITION (age)
    > select id, name, tel, age
    > from wyp;
复制代码

更可喜的是，Hive还支持多表插入，什么意思呢？在Hive中，我们可以把insert语句倒过来，把from放在最前面，它的执行效果和放在后面是一样的，如下：
hive> show create table test3;
OK
CREATE  TABLE test3(
  id int,
  name string)
Time taken: 0.277 seconds, Fetched: 18 row(s)

hive> from wyp
    > insert into table test
    > partition(age)
    > select id, name, tel, age
    > insert into table test3
    > select id, name
    > where age>25;

hive> select * from test3;
OK
8       wyp4
2       test
3       zs
Time taken: 4.308 seconds, Fetched: 3 row(s)
复制代码

可以在同一个查询中使用多个insert子句，这样的好处是我们只需要扫描一遍源表就可以生成多个不相交的输出。这个很酷吧！

四、在创建表的时候通过从别的表中查询出相应的记录并插入到所创建的表中

在实际情况中，表的输出结果可能太多，不适于显示在控制台上，这时候，将Hive的查询输出结果直接存在一个新的表中是非常方便的，我们称这种情况为CTAS（create table .. as select）如下：

hive> create table test4
    > as
    > select id, name, tel
    > from wyp;

hive> select * from test4;
OK
5       wyp1    131212121212
6       wyp2    134535353535
7       wyp3    132453535353
8       wyp4    154243434355
1       wyp     13188888888888
2       test    13888888888888
3       zs      899314121
Time taken: 0.089 seconds, Fetched: 7 row(s)
复制代码
数据就插入到test4表中去了，CTAS操作是原子的，因此如果select查询由于某种原因而失败，新表是不会创建的！
	

